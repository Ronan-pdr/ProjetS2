Conférence pour ne pas faire implorer son projet S2

Dissolution du groupe: ça va pas être le cas pour nous donc je prend pas de 
de notes sur ça

Il faut un leader qui gère tout pour un bon fonctionnement du projet 
-> travailler sur ce qu'on veut, ce qu'on aime et ça se passera bien

Coder avec d'autres gens, il va avoir d'autre gens qui vont utiliser le code que
tu fais, qui va peut être le modifier, le code doit être lisible, 
Il faut refacter son code, au début on s'en fiche tu dois faire en sorte que 
ça marhce et après tu la nettoie et tu met des commentaires, les variables
quoi fait quoi, mettre des noms de variable explicite, 

Architecture du projet, très important, séparer ses fichiers 

Pas laisser quelqu'un tout seul dans la galère, une ou deux autres personne qui
se penche avec lui sur le problème, s'aider 

lien rétrospective: Metro Rétro
-> toutes les semaines faire un point ce qu'on à fait de bien et de pas bien
ce qu'on veut changer ce qui à pas été, qu'est ce qu'on va faire pour que ça
se passe mieux, le fonctionnement de le première semaine va changer au fur et 
à mesure -> mur à postit (comment on se sent)

Communication est très importante, je pars faire ça et tout, aide que quelqu'un
aide

(j'ai vraiment l'impression qu'on aura jamais ce problème mais je garde)

Ce qui peut tuer le groupe c'est qu'on arrete de parler, 

Comment travailler en groupe:

ne pas travailler tous les 4 de nos cotés, feed  back direct sur le code, 
pouvoir communiquer, 

si on travail a distance il faut mettre la caméra, beaucoup plus convivial
-> on sait qu'on est la le facies parle et c'est mieux tout simplement

Git et Git forges

Conseil: ne pas essayer d'être trop ambitieux (j'ai l'impression est l'est un 
peu beaucoup mais en vrai aller let's go tkt ça va aller)

Les erreurs ont toujorus un propriétaire mais il faut pas dire à l'autre que 
c'est une grosse merde, il faut l'aider à modifier la chose, 

redbull café monster pour tenir les nuits blanche

Quand on rajoute qqch il faut que tout le monde ai vu + approuvé, comme ça 
c'est surotut une erreur de groupe tlm est "fautif" on a approuvé et revu

Ne pas être seul à faire du code, Si on voir qu'on est le seul a bosser à fond
ou genre qu'il font rien signal pour dire que c'est le moment de changer de 
groupe.

Si il y a un truc on peut dire qu'on veut séparer la note anonymement 
(tlm fait rien) bon ne pas trop faire ça genre vraiment, j'arrete les notes sur 
ça parce que ça va pas se produire, j'espère 

Groupe de projet mais pas que, le reste des cours doit bien passer, si qqn s'en
sort pas sur les cours normaux, comme ça si c'est le temps du projet on l'aide 
et ça économise du temps sur le temps du projet. 

Sur le projet il y a des deadline, avoir des trucs qui se fond, ne pas s'y
mettre trois jours avant maintenant et régulièrement, essayer de définir un 
planing de la semaine, genre vraiment à fond 

Bon mtn git: 

Avoir un historique du projet (controle Z puissance mille)
partager mon projet avec les autres, tester mon code assez safe sans avoir peur
de tout casser séparer ce qu'on fait (je pense il parle des branches)

Copier coller dans plusieurs dossier (pas mal de problèmes avec ça) on a 
plusieurs choix pour ça, copier, on colle notre projet entier, il a besoin de
beaucoup d'action et comment je fait mon projet. On est aussi des dev donc on a
la flemme de le faire copier coller des dossier c'est relou

(ce que j'ai dit avant c'est que si on utilise pas git) donc git c'est le bb 
très facile de patager etc donc parfait 

Timeline alternative branche alternative 
versionnement de git permettent de faire ça 

C'est quoi un dépo git? 
C'est un dossier ou git suit des choses
commit c'est un checkpoint, donc je peux y revenir à tout moment, ça ne stoque
que les changements, donc si j'ai 1k lignes et que je change une ligne la seule 
ligne sera push, benef donc surtout en terme de stockage

git status -> qu'est ce qu'il se passe sur notre répo, toujours faire 
git status, ne jamais tout push, pas de git add . ou git add -a; toujours
verif avant ce qu'il se passe. Si on est sur git add le du dossier sinon push 
tout les fichiers ou tu penses avoir fait les modifs 

Git log, me montre ce qu'il se passe, 
pour un bon git log il faut faire
git log --online --graph -all

Possible qu'une modif nique tout genre modif le nom d'une fonction donc si 
on change il peut avoir des problèmes 

.gitignore mettre un patern par ligne(fichier ou dossier) et git va faire comme
si ce fichier n'existe pas (si on veut add qqch qui est dans le gitignore
on va se faire cracher à la gl)

pusbh de base quand on est plusieurs pas super 

Les branches timeline qui change et pouvoir faire une timeline principale et
pouvoir changer des choses quand c'est prêt on merge tout.

Avoir son propre espace on peut faire la merde ça change rien sur la branche 
principale

merge c'est la choses la plus simple, merge pas parce que j'ai perdu ma branche
Bon je crois va falloir vous montrer vite fait 

Ne jamais touché à la branche main, toujours travailler sur un ligne en 
parallèle, on fait que des merge sur le commit on fait que ça marche 
mais on le fait pas sur la branche principale

Si il y a un problème sur le main c'est la responsabilité de tout le monde, 
(bon dans tous les cas j'essaye de gerer au maximum tout les trucs de git mais 
essayer de faire en sorte que je n'ai pas trop de boulot dessus car en vrai 
j'ai déjà pas mal à faire, il faut essayer que tout le monde sache tout faire
et pas que un add commit push (je pense), on verra)

On peut creer des branches par feature, creer une branche ne coute rien, c'est
même super de faire des branches partout mais en vrai oui il faut faire ça de
partout, branche dev ou il y a tout le développement, nom de branche on peut
faire, notre nom/le nom de la branche

Comment faire dans le dépot git, Il ya  plusieurs commane pour creer des
branches, direct depuis le termiale

creer une branche: git branch [NOM]
changer de branche: git switch [NOM]
merge: git merge ONE --into TWO (sinon direct sur le site hebergeur c'est plus
simple apparament) (pas forcement besoin du --into) il n'y a pas de hiérarchie 
de branche, 

Pour la création de la branche important de savoir ou on est
(bon il faut que vous installier git kraken du coup) et les branches si vous 
en avez besoin ba c'est vous qui faites la branche, car je sens on va en faire
pas mal mais faut faire attention aux conflis, je sais qu'on va en avoir mais 
on va essayer d'en avoir le moins possible, dans tous les cas on découvre encore
de comment ça marche et tout et on va s'ameliorer au fur et à mesure no worry

Remote: push ça update ce que j'ai dans mon local dans ma branche, les commit
que je push dans la branche c'est sur la branche de que push ça syncronise 
la branche local et le serveur, 

Pull, récupère les changement de la remote sur la local, 

fetch, (git fetch) revoir ce que ça fait j'ai pas très bien compris

Forge c'est un endroit pou hebeger code source (bon github c'est nice)
Forge est un serveur de host, (git server/remote) 

CI/CD ok ok mdrrrr
Security/security alrts and vulnerability disclosure 

Privié ou public (nous on est en privé on veut pas le partager on invite juste 
les gens) (github ou gitlab c'est selon soit, gitlab c'est vraiment pas mal 
complet aussi, c'est vraiment un choix perso

Issues qui doit faire quel taches (je pense qu'on pourrait essayer de s'en 
servir go voir vite fait mais bon)

(mettre des taches dans les projet et on peut cocher des choses pour dire 
l'état de progression) c'est dans projet (je crois)

request, pull request, merge request bon ça j'ai pas trop compris ce que 
c'était, (merge civilisé ou il faut accepter ou je ne sais quoi) 

Git Book : https://git-scm.com/book/en/v2

Git Worklows, pour organiser nos git repo (mais c'est un peu trop poussé
par rapport à ce qu'on va faire

Pour le site (on peut host le site sur github et gitlab (bon en vrai on fait sur
wix donc c'est directement host donc c'est good) 
Je pense que j'aurai pas le temps de le faire de A à Z mais bon on le sait pour
les prochaines fois 


Q&A:

Multijoueur une des partie les plus dure, donc il faut s'y mettre le plus tôt 
possible.

Ne pas montrer son code pendant une soutenance

Il faut pas trop les laisser jouer au début (je crois) 

git lfs (regarder le doc) assurer d'être sur la même version de unity sinon ça
va être la merde,

gitignore: 















